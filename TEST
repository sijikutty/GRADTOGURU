from playwright.sync_api import Page, sync_playwright, expect
from automation_utils import get_testdata
from ps_utils import navigate_menu, add_run_control_id, schedule_process, monitor_process
import pytest
import time

@pytest.mark.parametrize("testcase", get_testdata("test_Suspense_reclass"))
def test_Suspense_reclass(page: Page, testcase):
    # Extract test data from the testcase parameter
    testdata = testcase["testdata"] 

    # Navigate to the "Request CF Security Build" section
    navigate_menu(page=page,
                  menu_sequence=["General Ledger", 
                                 "External System Integration", 
                                 "Suspense Reclassification"])

    # Add run control ID to the form
    add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])
    
    # Locate the target iframe for filling in the form
    targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
    
    # Fill in the required fields for the security build request
    targetContentFrame.get_by_label("External System ID").fill(testdata['systemid'])
    targetContentFrame.get_by_label("Descr").fill(testdata['descr'])
    targetContentFrame.get_by_label("Journal Template").fill(testdata['jrnl_template'])

    # Click the "Save" button to save the request
    targetContentFrame.get_by_role("button", name="Save").click()
    
    # Click the "Run" button to initiate the security build process
    targetContentFrame.get_by_role("button", name="Run").click()

    # Schedule the process and retrieve the process instance ID
    process_instance_id = schedule_process(page=page, server_name=testdata["server"], process_name=testdata["suspenseprocess"])

    # Monitor the scheduled process and retrieve its status
    run_status = monitor_process(page=page, process_inst_id=process_instance_id, server=testdata["server"])

    # Print the run status of the CF Security Program for debugging
    print(f"Suspense Reclassification Program Run status: ", run_status)
    if run_status == 'Success':
        process_inst_row = targetContentFrame.locator("tr[id^='tr']").filter(has_text=process_instance_id)
        dist_status = process_inst_row.locator("[id^='PMN_PRCSLIST_DISTSTATUS']")

        # Wait for Run status to be Success/Not Success/Warning/Error for approx 10min.
        retry = 0
        while retry < 600:
            if dist_status.text_content() == 'Posted':
                break
            else:
                targetContentFrame.get_by_role("button", name="Refresh").click() 
                time.sleep(10)  # Adjust sleep time as needed
                retry += 1

        if dist_status.text_content().lower() != "posted":
            raise Exception(f"Distribution Status : {dist_status.text_content()}")
        else:
            # Add debug information for troubleshooting
            print("Distribution Status Posted. Checking View Log/Trace.")
            
            try:
                # Click the button to view details
                targetContentFrame.locator("[id=\"PRCSDETAIL_BTN\\$0\"]").click()

                # Wait for the new iframe to load
                time.sleep(5)  # Adjust as needed for page load
                
                # Click the "View Log/Trace" link
                pt_mod_frame_0 = page.frame_locator("iframe[name=\"ptModFrame_0\"]")
                view_log_trace_link = pt_mod_frame_0.get_by_role("link", name="View Log/Trace")
                view_log_trace_link.click()

                # Wait for the new iframe to load
                time.sleep(5)  # Adjust as needed for page load
                
                # Check for the presence of the file in the log
                pt_mod_frame_1 = page.frame_locator("iframe[name=\"ptModFrame_1\"]")
                file_list_item = pt_mod_frame_1.locator("[id=\"trCDM_FILELIST_VW\\$0_row2\"]")
                expect(file_list_item).to_contain_text("HF_SUSP_BLC.csv")

                print(f"Suspense Reclassification report has been generated")

            except Exception as e:
                raise Exception(f"Suspense Reclassification report has not been generated: {str(e)}")
    else:
        raise Exception(f"Process run status was not 'Success'. It was {run_status}")

