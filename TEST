        {
            "key"       : "Unit test GUI - TA130325",
            "env"       : "Dev",
            "runflag"   : "Y",
            "scenario"  : "test_Run_Queries_view_output",
            "testdata"  : 
            {
                "query" : "NAVG_BAL_INT_BINDERS",
                "query1" : "NAVG_CON_JRNLS",
                "query2" : "NAVG_RVL_JRNLS",
                "query3" : "NAVG_TRN_JRNLS",
                "query4" : "NAV_JOURNAL_DETAIL_ACTUALS",
                "query5" : "NAV_MCP_CHECK_REVAL_BS",
                "query6" : "NAV_MCP_CHECK_TRANS_USD_BS",
                "query7" : "NAV_MCP_CHECK_TRANS_USD_IS"
            }
        }
---------------
from playwright.sync_api import Page
from automation_utils import get_testdata
from ps_utils import navigate_menu
import pytest 

@pytest.mark.parametrize("testcase", get_testdata("test_Run_Queries_view_output"))
def test_Run_Queries_view_output(page:Page,  testcase):

    testdata = testcase["testdata"]

    navigate_menu(page=page,
                  menu_sequence=["Reporting Tools",
                                 "Query",
                                 "Query Manager"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")

    frame.get_by_label("Search By").select_option(label="Query Name")
    frame.locator("[id^='QRYSELECT_WRK_QRYSEARCHTEXT']").fill(testdata['query'])
    frame.get_by_role("button", name="Search", exact=True).click()

    query_row = frame.locator("tr[id^='tr']").filter(has_text = testdata['query'])

    with page.expect_download() as download_info:
        query_row.get_by_role("link", name="Excel").click()
        
    download = download_info.value
    download.save_as(path=r"Result/" + download.suggested_filename)

    
    
