from playwright.sync_api import Page, expect
from automation_utils import get_testdata, get_secrets,update_remote_file,transfer_file_to_unix,autosys_login,autosys_job_run,connect_to_oracleDB,execute_query
import pytest


@pytest.mark.parametrize("testcase", get_testdata("test_RMB_regression"))
def test_RMB_regression(page: Page, testcase):
    # Extract test data
    testdata = testcase["testdata"]
    
    # Retrieve secrets using the secret ID from test data
    secrets = get_secrets(testdata["ods_unix_secretID"])

    # Extract necessary connection information from test data
    hostname = testdata["odsserver"]
    username = secrets['User']
    password = secrets['Password']

    # Extract file location and content for ODS Unix file modification
    search_path = testdata["search_path"]
    Input_file = testdata["file_to_edit"]
    local_input_file_path = testdata["local_file_path"]
    local_triggr_file_path = testdata["local_triggr_file_path"]
    trigger_file=testdata["trigger"]
    local_log_file_path = testdata["local_log_file_path"]
    log_file=testdata["log_file"]

    # ODS Unix File modification
    try:
        # Attempt to update the remote file on ODS server
        transfer_file_to_unix(hostname, username, password, local_input_file_path, search_path,Input_file)
        # Attempt to update the trigger file on ODS server
        transfer_file_to_unix(hostname, username, password, local_triggr_file_path, search_path,trigger_file)
        # Attempt to update the log file on ODS server
        transfer_file_to_unix(hostname, username, password, local_log_file_path, search_path,log_file)

        print("ODS RMB File Upload successful.")
    except Exception as e:
        # Handle and print any runtime error that occurs during file update
        print(f"Error occurred: {str(e)}")

    # Call autosys login function
    autosys_login(page, testdata["autosys_url"])

    # List of jobs to execute sequentially
    jobs_to_execute = [
        (testdata["RMB_load_job"], testdata["file_watcher"]),
        (testdata["RMB_load_job"], testdata["ODS_file_load_job"]),
        (testdata["RMB_load_job"], testdata["ODS_landing_to_stg_job"]),
        (testdata["RMB_load_job"], testdata["Staging_Journal_to_FAH_job"]),
        (testdata["RMB_load_job"], testdata["file_archive"]),
        (testdata["RMB_load_job"], testdata["log_archive"]),
        (testdata["RMB_load_job"], testdata["FAH_processing_job"]),        
        (testdata["RMB_load_job"], testdata["3rd_party_customisation_job"]),
        (testdata["RMB_load_job"], testdata["3rd_party_edit_job"]),
        (testdata["RMB_load_job"], testdata["journal_ss_rt"]),
        (testdata["RMB_load_job"], testdata["journal_post"]),
        (testdata["RMB_load_job"], testdata["Update_threshold"]),
        (testdata["RMB_load_job"], testdata["journal_process"])
    ]
    overall_success = True  # Flag to track overall success

    for job in jobs_to_execute:
        if overall_success:
            job_status = autosys_job_run(page, testdata, job[0], job[1])
            print(f"Autosys job {job[1]} Status: {job_status}")

            if job_status.upper() != "SUCCESS":
                overall_success = False  # Update flag if any job fails

    if not overall_success:
        raise Exception("One or more jobs failed.")    
    
    # Connect to Oracle DB
    connection = connect_to_oracleDB(testdata["ps_db"])
    query = "SELECT COUNT(*) FROM PS_JRNL_HEADER WHERE SOURCE = 'RMB'"    
    if connection:
        # Execute query
        query_result = execute_query(connection, query)

        # Check query execution status
        if query_result["status"]:
            print(f"Query executed successfully. Count: {query_result['count']}")
        else:
            print(f"Failed to execute query. Error: {query_result['error']}")
    else:
        print("Failed to connect to the database.")
    
    
