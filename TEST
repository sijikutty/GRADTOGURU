from playwright.sync_api import Page, expect
from automation_utils import get_testdata, get_secrets,construct_putty_credentials,save_credentials
import pytest

@pytest.mark.parametrize("testcase", get_testdata("test_Maximis_regression"))
def test_Maximis_regression(page:Page, testcase):

    testdata = testcase["testdata"]

        # Credentials
    credentials_data = construct_putty_credentials(testdata)

    cred_json_file_path=save_credentials(credentials_data)

    page.goto(testdata["autosys_url"])
    
    try:
        expect(page.get_by_text("AutoSys Workload Automation")).to_be_visible()
        print("Autosys Login Success!")

    except AssertionError:
        raise Exception("Autosys Login Failed.")
    
  
    page.locator("a").filter(has_text="Quick View").click()
    frame = page.frame_locator("#QuickView")
    frame.get_by_label("Enter job name search pattern").fill(testdata["maximis_load_job"])
    frame.get_by_label("Enter job name search pattern").press("Enter")
    frame.get_by_role("link", name="Select to expand").click()
    frame.get_by_role("link", name=testdata["ODS_file_load_job"]).click()
    page.wait_for_timeout(1500)
    frame.locator("[id=\"jobResultTable\\:eventId\"]").select_option("1")
    frame.locator("[id=\"jobResultTable\\:sendEventButton\"]").click()
    frame.frame_locator("iframe[name=\"_blank\"]").get_by_role("button", name="Yes").click()
    page.wait_for_timeout(30000)
    frame.get_by_role("button", name="Refresh").click()

    logframe = page.frame_locator("#QuickView").locator("[id=\"nestedDetailPageSuffix\\:logsTable\"]")

    # Get the second row of the table (assuming you want the second row)
    Log_row = logframe.locator("tbody tr:nth-child(2)")
            
    # Get the text from the sixth cell in the second row
    Job_status = Log_row.locator("td:nth-child(5)").inner_text().strip()

    # Wait for Run status to be Success/Not Success for approximately 10 minutes.
    retry = 0
    while retry < 600:
        expected_values = ['SUCCESS', 'FAILURE']
        print(Job_status)
        if Job_status in expected_values:
            break
        else:
            page.wait_for_timeout(20000)
            frame.get_by_role("button", name="Refresh").click()
            retry += 1

    if Job_status.upper() != "SUCCESS":
        raise Exception(f"Job Status : {Job_status}")
    else:
        return Job_status
