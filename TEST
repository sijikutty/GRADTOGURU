automation utils.py:
import json
import boto3
from botocore.exceptions import ClientError
# from credentials_util import get_rally_details

def fetch_testcase_from_s3(s3bucket, filename):
    try:
        session = boto3.Session(profile_name="dev")

        # Getting the testcase file content
        s3_client = session.client("s3")
        
        # Getting the file
        response = s3_client.get_object(Bucket=s3bucket, Key=filename)

        # Reading the file content
        file_content = None        
        file_content = response['Body'].read().decode('utf-8')

        # Converting to JSON
        json_content = json.loads(file_content)
        return json_content
    
    except ClientError as err:
        print(err)


def get_GUI_testcases():
    
    # Getting 'testcase.json' from s3
    TCjson_s3bucket = "app-5208-dev-ue1-shared-s3-1"
    TCjson_filename = "Testing/Data/PSTesting/testcase.json"
    json_content = fetch_testcase_from_s3(TCjson_s3bucket, TCjson_filename)

    print(json_content)

    global gui_smoketestcases
    gui_smoketestcases = []

    # Filtering GUI tests from testcase.json
    for testcase in json_content["testcases"]:
        if "smoketest gui" in testcase['key'].lower():
            gui_smoketestcases.append(testcase)

    global rally_secrets
    rally_secrets = json_content["rally"]

    # rally_secrets_path = json_content["rally_secrets"]
    # rally_secrets = get_rally_details(rally_secrets_path)


def get_testdata(tc_scenario):

    # If global var 'gui_smoketestcases' not defined, fetch the testcases 
    if not "gui_smoketestcases" in globals():
        get_GUI_testcases()

    testdata = []

    # Getting all the testcases with the provided test scenario 
    global gui_smoketestcases
    for testcase in gui_smoketestcases:
        if testcase['scenario'] == tc_scenario and testcase['runflag'].lower() == 'y':
            testcase['rally'] = rally_secrets
            testdata.append(testcase)

    return testdata

------
from automation_utils import get_testdata
import win32com.client
import pytest
import psutil
import time
import pandas as pd

@pytest.mark.parametrize("testcase", get_testdata("test_fah_concurrent"))
def test_FAH_Concurrent(testcase):
    # Close any existing instances of UFT
    for process in psutil.process_iter():
        if process.name() == "UFT.exe":
            process.terminate()

        # Convert JSON data to DataFrame
    df = pd.DataFrame(testdata)

    # Specify the path for the Excel file
    excel_file_path = r"Result/tcjson.xlsx"

    # Write DataFrame to Excel
    df.to_excel(excel_file_path, index=False)

    print("Excel file created successfully:", excel_file_path)

    testdata = testcase["testdata"]
    test_path = testdata["test_path"]
    fah_url = testdata["fah_url"]
    fahReport = testdata["fahReport"]
    fahSource = testdata["fahSource"]
    fahRequestid = testdata["fahRequestid"]

    try:
        # Create an instance of UFT
        uft = win32com.client.Dispatch("QuickTest.Application")

        # Start UFT
        uft.Launch()

        # Make the UFT window visible
        uft.Visible = True

        # Open a test
        uft.Open(test_path)

        # Create a RunResultsOptions object
        uftResultsOpt = win32com.client.Dispatch("QuickTest.RunResultsOptions")

        # Save the changes
        uft.Test.Save()

        # Run the test with parameters
        uft.Test.Run(uftResultsOpt, True)

        # Close the test
        uft.Test.Close()

        # Quit UFT
        uft.Quit()

        print("Script execution success!")

    except AssertionError:
        raise Exception("Script execution failed.")
---------
UnboundLocalError: cann==============================ot access local variable 'testdata' where it is not associated with a value   
