import paramiko

# SSH connection details
hostname = "your_hostname"
username = "your_username"
password = "your_password"

search_path = '/appl/cits/dev/infashr/fit/data/in'  # Path to search for files

def list_files(sftp, remote_path):
    try:
        # Change directory to the remote_path
        sftp.chdir(remote_path)

        # List all items (files and directories) in the current directory
        items = sftp.listdir()

        for item in items:
            item_path = f"{remote_path}/{item}"
            try:
                # Attempt to change into the directory to verify it's a folder
                sftp.chdir(item_path)

                # Recursively list files and folders
                list_files(sftp, item_path)

                # Change back to the parent directory after listing
                sftp.chdir(remote_path)

            except IOError:
                # If not a directory, it's a file
                print(f"Found file: {item_path}")

    except IOError:
        # IOError will be raised if directory doesn't exist or permission is denied
        pass

    except Exception as e:
        print(f"Error listing folder {remote_path}: {str(e)}")


# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Open an SFTP session on the SSH connection
    sftp = ssh_client.open_sftp()

    # Print all files in the specified directory
    print(f"Listing all files in {search_path}:")
    list_files(sftp, search_path)

finally:
    # Close the SFTP session and SSH connection
    if ssh_client:
        ssh_client.close()
