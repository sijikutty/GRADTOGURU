'''
This script automates for running the Autosys Jobs for copying details from Coupa to Peoplesoft

Author : Xavier Alwin
Date   : 08/11/2023
'''

# Selenium Specific Imports
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import SessionNotCreatedException, WebDriverException, NoSuchWindowException
from seleniumpagefactory.Pagefactory import PageFactory
from selenium.webdriver.common.by import By

# Standard Library Imports
from datetime import datetime
import logging
import time
import sys
import pandas as pd
import util
import config

def create_session():
    session_retry = 0

    try:
        # Retry Session Creation (Instatiating Webdriver) in case of session creation failure.
        while session_retry < config.MAX_SESSION_CREATE_RETRY:

            try:
                # Adding headless Edge Option to hide browser while running the script
                options = webdriver.EdgeOptions()   
                #driver = webdriver.Chrome()
                #options.add_argument('--headless')

                # Initializing Edge webdriver 
                driver = webdriver.Edge(options=options)

                driver.maximize_window()

                logger.info('Session Created Successfully.')
            
                # If webdriver is created without issue, return the driver
                return driver

            except WebDriverException as e:
                logger.error(f'Session creation failed on attempt {session_retry + 1}.', exc_info=True)

                wait_time = 10

                logger.info(f'Reattempting in {wait_time} seconds.')
                time.sleep(wait_time)
                logger.info('Reattempting session creation.')

                session_retry = session_retry + 1

        else:
            # If max retries reached without success, raise Exception
            raise SessionNotCreatedException
    
    except SessionNotCreatedException as e:
        logger.error(f'Session creation failed. Max retries reached.')
        raise util.FatalError

def read_data():
    '''
    This function Reads data from the input spreadsheet.
    Returns: A Pandas dataframe with input data.
    '''
    try:
        autosys_jobs = pd.read_excel(r'C:\HIG\POC\Automation\Source_data\Job_list.xlsx',sheet_name='Dev')

        return autosys_jobs
    
    except Exception as e:
        logging.error(e)

def data_mapping(data):
    '''
    This function maps the spreadsheet values to the corresponding fields.
    Returns: A list of mapped data
    '''

    try:
        mapped_data = []

        for index, row in data.iterrows():
            mapped_data.append(row['JobNames'])

        return mapped_data
    
    except Exception as e:
        logging.error(e)

def Autosys_Main(driver):
    try:
        # Navigating to TST Autosys URL
        #driver.get(config.COUPA_URL[config.TEST])
        #config.restart_job = ''
        #restart_job = 'dua6d2cmd_fscmwsrv_pycycle_hk'
        #Reading the xle file and provide the job names to Autosys 
        data = read_data()
        mapped_data = data_mapping(data)
        
        if pd.isna(config.restart_job):
            flag_set = True
        else:
            flag_set = False

        for row in mapped_data:
            print("job ", row)
            if row == config.restart_job:
                flag_set = True

            if flag_set == True:    
                print("Running Job ", row)
                driver.get('https://testwcc.thehartford.com/wcc/ui/')
        
                requestPath = (By.XPATH,'//a[.//span[contains(text(), "Quick View")]]')
                WebDriverWait(driver, 20).until(EC.element_to_be_clickable(requestPath)).click()

                WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="QuickView"]')))
        
                driver.find_element(By.ID, "jobNameInput").clear()
                driver.find_element(By.ID, "jobNameInput").send_keys(row)
        
                driver.find_element(By.ID, "goButtonID").click()
                time.sleep(3)
        
                reqJobResult = (By.XPATH, '//*[@id="jobResultTable:eventId"]/option[2]')
                WebDriverWait(driver, 20).until(EC.element_to_be_clickable(reqJobResult)).click()
                time.sleep(3)
    
                reqSendEvtButton = (By.ID, "jobResultTable:sendEventButton")
                WebDriverWait(driver, 20).until(EC.element_to_be_clickable(reqSendEvtButton)).click()
                time.sleep(3)
            
                WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '/html/body/div[1]/iframe')))
            
                driver.find_element(By.ID, "sendEvtYes").click()
                time.sleep(3)
        
                driver.switch_to.default_content()
        
                WebDriverWait(driver, 20).until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, '//*[@id="QuickView"]')))
                time.sleep(3)

                driver.find_element(By.ID, "refreshButtonID").click()
                time.sleep(3)

                while driver.find_element(By.XPATH,'//*[@id="jobResultTable"]/table[2]/tbody/tr[2]/td[5]/img').get_attribute('alt') == "Running (RUNNING)" :
                    time.sleep(3)
                    driver.find_element(By.ID,"refreshButtonID").click()    

                if driver.find_element(By.XPATH,'//*[@id="jobResultTable"]/table[2]/tbody/tr[2]/td[5]/img').get_attribute('alt') == "Failure (FAILURE)" :
                    break    
               
        logger.info('Autosys Job Submittion Successful. ')

    except AssertionError as e:

        # Get the login failure message from login page
        #login_msg = login_page.get_login_message()

        logger.error(f'Autosys Main Failed. \n\n'
                     f'FAILURE MESSAGE :  {login_msg}')
        raise util.FatalError

    except Exception as e:
        logger.error(f'Autosys Main Failed Other. {e}')
        raise util.FatalError

def main():
    print('Autosys start Time :', datetime.now())

    try:
        global logger
        logger = util.setup_logger('Autosys_Run.py')
        #set_run_env(sys.argv)

        driver = create_session()
        Autosys_Main(driver)

        # Closing web driver
        driver.quit()
        time.sleep(3)
        logger.info('Completed Successfully.')

    except NoSuchWindowException as e:
        logger.error(f'The Browser Window has been closed. {e}')
        sys.exit(1)

    except util.FatalError as e:
        logger.error('Exiting.')
        sys.exit(1)

    except Exception as e:
        logger.error(f'{e} \n', exc_info=True)

    print('End Time :', datetime.now())

if __name__ == '__main__':
    main()
