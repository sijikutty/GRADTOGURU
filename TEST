def update_rally(page, request, testcase):
    ''' This fixture updates rally after the completion of each test'''

    yield

    # Taking screenshot of the test
    screenshot_path = f"Result\{request.function.__name__}.png"
    page.screenshot(path=screenshot_path)

    notes = ""

    # Setting verdict and notes based on the test outcome 
    if request.node.rep_call.passed:
        verdict = "Pass"

    elif request.node.rep_call.failed:
        verdict = "Fail"

        # Getting the exception message to add to rally
        notes = request.node.rep_call.longrepr.reprcrash.message


    # Generating rally payload
    payload = {  
        "key": testcase['key'],

        "Rally": {
            "server"    : testcase["rally"]["server"],
            "user"      : testcase["rally"]["user"],
            "apikey"	: testcase["rally"]["apikey"],
            "workspace" : testcase["rally"]["workspace"], 
            "project"   : testcase["rally"]["project"],
            "Tcid"      : testcase["key"].split("-")[-1].strip(),
            "build"     : f"{testcase['env']}-Automated Run", 
            "run_date"  : datetime.now().isoformat(), 
            "verdict"   : verdict,
            "notes"     : f"The testcase has {verdict}ed. {notes}"
        }
    } 

    # Creating testcase result in rally
    tcr = create_TCResult(payload, screenshot=screenshot_path)
