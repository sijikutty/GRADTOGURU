CODE1:
def get_secrets(secretID):
    session = boto3.Session(profile_name="dev")

    secretmanagerclient = session.client("secretsmanager", region_name="us-east-1")

    response = secretmanagerclient.get_secret_value(SecretId=secretID)
    secret = json.loads(response['SecretString'])

    return secret

def construct_fah_credentials(testdata):
    # Function to construct credentials data structure
    fahsecrets = get_secrets(testdata["fahsecretID"])

    data = {
        "fahuser": [
            {
                "fahusername": fahsecrets['User'],
                "fahpassword": fahsecrets['Password']
            }
        ]
    }

    return data

def save_credentials(data):
    # Function to save credentials data to JSON file

    # Directory where JSON file will be located
    directory = os.path.expanduser('~')  # Example: current user's home directory

    # Ensure the directory exists, create if not
    os.makedirs(os.path.join(directory, '.secret'), exist_ok=True)

    # Path to the JSON file
    cred_json_file_path = os.path.join(directory, '.secret', 'credentials.json')

    # Save data to JSON file

    with open(cred_json_file_path, 'w') as json_file:
        json.dump(data, json_file, indent=4)
        print(f"Data written to {cred_json_file_path}")

CODE2:
from automation_utils import get_testdata, get_secrets,construct_fah_credentials,save_credentials
import win32com.client
import pytest
import psutil
import time
import pandas as pd
import json
import os

# Test function
@pytest.mark.parametrize("testcase", get_testdata("test_fah_concurrent"))
def test_FAH_Concurrent(testcase):
    # Close any existing instances of UFT
    for process in psutil.process_iter():
        if process.name() == "UFT.exe":
            process.terminate()
    
    # Retrieve test data
    testdata = testcase["testdata"]
    
    # Delete the Excel and JSON files if they exist
    if os.path.exists("Result/tcjson.xlsx"):
        os.remove("Result/tcjson.xlsx")
    if os.path.exists("Result/uftres.json"):
        os.remove("Result/uftres.json")
    
    # Convert JSON data to DataFrame
    df = pd.DataFrame([testdata])

    # Specify the path for the Excel file
    excel_file_path = "Result/tcjson.xlsx"

    # Write DataFrame to Excel
    df.to_excel(excel_file_path, index=False)

    test_path = testdata["test_path"]

    # Credentials
    # Construct credentials data
    credentials_data = construct_fah_credentials(testdata)

    # Save credentials data to JSON file
    save_credentials(credentials_data)



    try:
        # Create an instance of UFT
        uft = win32com.client.Dispatch("QuickTest.Application")

        # Start UFT and make the window visible
        uft.Launch()
        uft.Visible = True
        
        # Open the test
        uft.Open(test_path)

        # Create a RunResultsOptions object
        uftResultsOpt = win32com.client.Dispatch("QuickTest.RunResultsOptions")

        # Save the changes
        uft.Test.Save()

        # Run the test with parameters
        uft.Test.Run(uftResultsOpt, True)

        # Get the result path from UFT script
        resultpath = "Result/uftres.json"

        with open(resultpath, 'r') as json_file:
            # Load JSON data from the file
            data = json.load(json_file)
        
        # Get the verdict and result from the JSON data
        verdict = data['Rally']['verdict']
        result = data['Rally']['notes']

        # Check if verdict is not "Passed"
        if verdict != "Pass":
            if result:
                # Raise an exception with the result
                raise Exception(result)
            
        print("Script execution success!")

    except Exception as e:
        print("Error:", e)
        raise e
    
    finally:
        # Delete the credentials JSON file if it exist
        if os.path.exists(cred_json_file_path):
            os.remove(cred_json_file_path)
        # Close the test
        uft.Test.Close()

        # Quit UFT
        uft.Quit()
Can you correct this code         if os.path.exists(cred_json_file_path):
            os.remove(cred_json_file_path)

