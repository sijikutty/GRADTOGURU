from automation_utils import get_testdata
import win32com.client as win32
import pytest
import psutil
from pywinauto.application import Application
import time

@pytest.mark.parametrize("testcase", get_testdata("test_fah_concurrent"))
def test_FAH_Concurrent(testcase):
    # Close any existing instances of QTP
    for process in psutil.process_iter():
        if process.name() == "UFT.exe":
            process.terminate()

    testdata = testcase["testdata"]
    test_path = testdata["test_path"]
    fah_url = testdata["fah_url"]
    fahReport = testdata["fahReport"]
    fahSource = testdata["fahSource"]
    fahRequestid = testdata["fahRequestid"]

    try:
        # Start QTP
        qtp = win32.Dispatch("QuickTest.Application")
        qtp.Launch()
        qtp.Visible = True

        # Open the test
        qtp.Open(test_path)
        time.sleep(10)  # Wait for the test to open

        # Activate QTP window
        qtp_window = Application().connect(title_re=".*QuickTest Professional.*")
        qtp_window = qtp_window.window(title_re=".*QuickTest Professional.*")

        # Open the Data Table
        qtp_window.MenuSelect("Design->Data Table")
        time.sleep(5)  # Wait for the Data Table to open

        # Add a new row
        data_table = qtp_window.child_window(title="DataTable_0", control_type="Table")
        data_table.click_input(double=True)  # Double-click to add a new row

        # Set values in cells using pywinauto
        cell_1 = data_table.child_window(title="A1", control_type="Edit")
        cell_1.set_text(fah_url)

        cell_2 = data_table.child_window(title="B1", control_type="Edit")
        cell_2.set_text(fahReport)

        cell_3 = data_table.child_window(title="C1", control_type="Edit")
        cell_3.set_text(fahSource)

        cell_4 = data_table.child_window(title="D1", control_type="Edit")
        cell_4.set_text(fahRequestid)

        # Save changes
        qtp_window.MenuSelect("File->Save")

        # Close QTP
        qtp.Test.Close()
        qtp.Quit()
    except Exception as e:
        raise Exception(f"An error occurred: {str(e)}")
