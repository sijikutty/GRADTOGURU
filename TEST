from playwright.sync_api import Page,expect
from automation_utils import get_testdata,get_secrets
from ps_utils import navigate_menu, add_run_control_id
import pytest 
import time
from automation_utils import get_testdata


@pytest.mark.parametrize("testcase", get_testdata("test_GL_Configuration"))
def test_GL_Configuration(page: Page, testcase):
    # Extract test data for the current test case
    testdata = testcase["testdata"]  
    secrets = get_secrets(testdata["secretID"])
    # Call the function to post the journal using the provided test data
    #jrnl_post(page, testdata)
    # Navigate to the "Build Combination Data" section in the UI
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Define Values",
                                     "Define ChartField Value"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")

        expect(targetContentFrame.get_by_role("link", name="Account")).to_be_visible()

        targetContentFrame.get_by_role("link", name="Account").click()
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Account", exact=True).fill(testdata['ACCOUNT'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()

        expect(targetContentFrame.get_by_label("Effective Date")).to_be_visible()
        expect(targetContentFrame.get_by_label("Monetary Account Type")).to_be_visible()
        print(f"Chartfield Values page is accessible")
    except Exception as e:
        raise Exception(f"Chartfield Values page cannot be navigated : {str(e)}")
    try:
          # Navigate to the "Request CF Security Build" section
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Security", 
                                     "Chartfield Security", 
                                     "Maintain Security Rules",
                                     "Request CF Security Build"])

        # Add run control ID to the form
        add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])

        # Locate the target iframe for filling in the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")

        expect(targetContentFrame.get_by_text("*Security Method")).to_be_visible()
        expect(targetContentFrame.get_by_text("*Request Date Option")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"SEC_BUILD_REQ_DATE_REQ_OPTION2\\$0\"]")).to_be_visible()

        # Print the run status of the CF Security Program for debugging
        print(f"CF Security build page is accessible")
    except Exception as e:
        raise Exception(f"CF Security build page cannot be navigated : {str(e)}")
    
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "ChartField Value Sets",
                                     "Setup ChartField Value Sets"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")

        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("ChartField Value Set").fill(testdata['CFValueset'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").locator("#CFV_SET_TBL_CFV_SET")).to_contain_text(testdata['CFValueset'])
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Effective Date")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Status")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Field Name")).to_be_visible()
        # Print the run status of the CF Security Program for debugging
        print(f"ChartField Value Set page is accessible")
    except Exception as e:
        raise Exception(f"ChartField Value Set page cannot be navigated : {str(e)}")
    #4---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Combination Editing",
                                     "Build Combination Data"])  
            # Add run control ID to the form
        add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])
    
        # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]") 
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_CDT_BUILD_OPTN\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_LEDGER_GROUP\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_EFFDT_TO\\$0\"]")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Combo build page is accessible")
    except Exception as e:
        raise Exception(f"Combo build page cannot be navigated : {str(e)}")

#5---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Combination Editing",
                                     "Review Combo Selector Tbl Data"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Group").fill(testdata['Group'])
        targetContentFrame.get_by_role("button", name="Search").click()
        expect(targetContentFrame.locator("[id=\"tdINQ_DUMMY\\$0\\#9\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divCOMBO_SEL_WRK_COMBINATION\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"CF2_TO\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"CF1_FROM\\$0\"]")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Review Combo Selector Tbl Data page is accessible")
    except Exception as e:
        raise Exception(f"Review Combo Selector Tbl Data page cannot be navigated : {str(e)}")

    #6---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Combination Editing",
                                     "Combination Rule"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Combination Rule").fill(testdata['Combo_rule'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.locator("#COMBO_RULE_TBL_SETID")).to_contain_text(testdata['SETID'])
        expect(targetContentFrame.locator("#COMBO_RULE_TBL_COMBINATION")).to_contain_text(testdata['Combo_rule'])

                # Print the run status of the CF Security Program for debugging
        print(f"Combination Rule page is accessible")
    except Exception as e:
        raise Exception(f"Combination Rule page cannot be navigated : {str(e)}")

   #7---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "User Preferences",
                                     "Define User Preferences"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        

        targetContentFrame.get_by_label("User ID").fill(secrets['User'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.locator("#win0divOPR_LINKS_OPR_DEF_LINK_FS1")).to_be_visible()
        expect(targetContentFrame.locator("#win0divOPR_LINKS_OPR_DEF_LINK_GL1")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define User Preferences page is accessible")
    except Exception as e:
        raise Exception(f"Define User Preferences page cannot be navigated : {str(e)}")
     #8---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Journals",
                                     "Define Journal Source"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Source").fill(testdata['Source'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.locator("#win0divSOURCE_TBL_SETID")).to_be_visible()
        expect(targetContentFrame.locator("#SOURCE_TBL_SOURCE")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Define Journal Source page is accessible")
    except Exception as e:
        raise Exception(f"Define Journal Source page cannot be navigated : {str(e)}")



    #9---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Calendars/Schedules",
                                     "Define TimeSpans"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("TimeSpan").fill(testdata['Timespan'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.get_by_label("Start Year", exact=True)).to_be_visible()
        expect(targetContentFrame.locator("#TIME_SPANS_TIME_SPAN")).to_contain_text(testdata['Timespan'])
        expect(targetContentFrame.locator("#TIME_SPANS_SETID")).to_contain_text(testdata['SETID'])
                # Print the run status of the CF Security Program for debugging
        print(f"Define TimeSpans page is accessible")
    except Exception as e:
        raise Exception(f"Define TimeSpans page cannot be navigated : {str(e)}")



    #10-----
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Market Rates"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
                # Print the run status of the CF Security Program for debugging
        print(f"ChartField Value Set page is accessible")
    except Exception as e:
        raise Exception(f"ChartField Value Set page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Market Rates"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
                # Print the run status of the CF Security Program for debugging
        print(f"ChartField Value Set page is accessible")
    except Exception as e:
        raise Exception(f"ChartField Value Set page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Market Rate Definition"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("Market Rate Index").fill(testdata['Rate_indx'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.locator("[id=\"RT_RATE_DEF_TBL_FROM_CUR\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("#RT_INDEX_TBL_RT_RATE_INDEX")).to_contain_text(testdata['Rate_indx'])
        expect(targetContentFrame.locator("#PSXLATITEM_XLATLONGNAME")).to_contain_text("Exchange Rate")
 
                # Print the run status of the CF Security Program for debugging
        print(f"Market Rate Definition page is accessible")
    except Exception as e:
        raise Exception(f"Market Rate Definition page cannot be navigated : {str(e)}")


   #----
    #11---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Business Unit Related", 
                                     "General Ledger",
                                     "Ledger for a Unit"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("Business Unit").fill(testdata['BU'])
        expect(targetContentFrame.get_by_label("Ledger Group")).to_be_visible()
        expect(targetContentFrame.get_by_label("Ledger Type")).to_be_visible()
        expect(targetContentFrame.get_by_label("Calendar ID")).to_be_visible()
        expect(targetContentFrame.locator("#app_label")).to_contain_text("Definition")
                # Print the run status of the CF Security Program for debugging
        print(f"Ledger for a Unit page is accessible")
    except Exception as e:
        raise Exception(f"Ledger for a Unit page cannot be navigated : {str(e)}")


    #12---
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Business Unit Related", 
                                     "General Ledger",
                                     "Open Periods",
                                     "Open Periods Mass Update"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("PeopleSoft Product")).to_be_visible()
        expect(targetContentFrame.get_by_label("Unit")).to_be_visible()
        expect(targetContentFrame.get_by_label("Calendar")).to_be_visible()
        expect(targetContentFrame.get_by_label("Ledger Code")).to_be_visible()
        expect(targetContentFrame.get_by_label("Ledger Group")).to_be_visible()
        expect(targetContentFrame.get_by_label("From Year")).to_be_visible()
        expect(targetContentFrame.get_by_label("From Period")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Apply")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Open Periods Mass Update page is accessible")
    except Exception as e:
        raise Exception(f"Open Periods Mass Update page cannot be navigated : {str(e)}")
    


    #13--
    try:
        navigate_menu(page=page,
                      menu_sequence=["PeopleTools", 
                                     "Workflow", 
                                     "Routings and Roles",
                                     "Workflow Route Control Profile"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.locator("#RTE_CNTL_PROF_RTE_CNTL_PROFILE").fill(testdata['profile'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        expect(targetContentFrame.get_by_label("Description:")).to_be_visible()
        expect(targetContentFrame.get_by_label("From Value:")).to_be_visible()
        expect(targetContentFrame.get_by_label("To Value:")).to_be_visible()
        expect(targetContentFrame.get_by_text(testdata['profile'])).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Workflow Route Control Profile page is accessible")
    except Exception as e:
        raise Exception(f"Workflow Route Control Profile page cannot be navigated : {str(e)}")
    
    #14--
    try:
        navigate_menu(page=page,
                      menu_sequence=["PeopleTools", 
                                     "Security", 
                                     "User Profiles",
                                     "User Profiles"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")


        targetContentFrame.locator("#PSOPRDEFN_SRCH_OPRID").fill(secrets['User'])
        targetContentFrame.locator("#PSOPRDEFN_SRCH_OPRID").press("Enter")
        expect(targetContentFrame.get_by_label("Language")).to_be_visible()
        expect(targetContentFrame.get_by_role("cell", name="Account Locked Out?", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"User Profiles page is accessible")
    except Exception as e:
        raise Exception(f"User Profiles page cannot be navigated : {str(e)}")

    #15--
    try:
        navigate_menu(page=page,
                      menu_sequence=["PeopleTools", 
                                     "Process Scheduler", 
                                     "Process Monitor"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("User ID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Name")).to_be_visible()
        expect(targetContentFrame.get_by_label("Instance")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Refresh")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Process Monitor page is accessible")
    except Exception as e:
        raise Exception(f"Process Monitor page cannot be navigated : {str(e)}")


#16--
    try:
        navigate_menu(page=page,
                      menu_sequence=["PeopleTools", 
                                     "Lifecycle Tools", 
                                     "Migrate Data",
                                     "Data Migration Workbench"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Project Name")).to_be_visible()
        expect(targetContentFrame.get_by_label("Description")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Data Migration Workbench page is accessible")
    except Exception as e:
        raise Exception(f"Data Migration Workbench page cannot be navigated : {str(e)}")
    

    #17--
    try:
        navigate_menu(page=page,
                      menu_sequence=["Allocations", 
                                     "Define and Perform Allocations", 
                                     "Define Allocation Step"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Allocation Step")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
        expect(page.get_by_role("button", name="NavBar")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Define Allocation Step page is accessible")
    except Exception as e:
        raise Exception(f"Define Allocation Step page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Allocations", 
                                     "Define and Perform Allocations", 
                                     "Define Allocation Group"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("SetID")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Allocation Group")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define Allocation Group page is accessible")
    except Exception as e:
        raise Exception(f"Define Allocation Group page cannot be navigated : {str(e)}")
    

#18--
    try:
        navigate_menu(page=page,
                      menu_sequence=["Reporting Tools", 
                                     "PS/nVision", 
                                     "PS/nVision Schedule Requests"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Business Unit")).to_be_visible()
        expect(targetContentFrame.get_by_label("Report ID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Description")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"PS/nVision Schedule Requests page is accessible")
    except Exception as e:
        raise Exception(f"PS/nVision Schedule Requests page cannot be navigated : {str(e)}")
    
    try:
        navigate_menu(page=page,
                      menu_sequence=["Reporting Tools", 
                                     "PS/nVision", 
                                     "PS/nVision Scope Definitions"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Report Scope")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()


                # Print the run status of the CF Security Program for debugging
        print(f"PS/nVision Scope Definitions page is accessible")
    except Exception as e:
        raise Exception(f"PS/nVision Scope Definitions page cannot be navigated : {str(e)}")
    

    #19--
    try:
        navigate_menu(page=page,
                      menu_sequence=["Tree Manager", 
                                     "Tree Manager"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.locator("#PSTREEDEFVW_TREE_NAME")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Tree Manager page is accessible")
    except Exception as e:
        raise Exception(f"Tree Manager page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Tree Manager", 
                                     "Tree Auditor"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.locator("#RUN_TREE_AUDVW_RUN_CNTL_ID")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Tree Auditor page is accessible")
    except Exception as e:
        raise Exception(f"Tree Auditor page cannot be navigated : {str(e)}")
    
       



    #20--
    try:
        navigate_menu(page=page,
                      menu_sequence=["Tree Manager", 
                                     "Tree Utilities",
                                     "Copy/Delete Trees"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_role("tab", name="Tree Maintenance")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divPSTREEMAINTWRK_SETCNTRLVALUE\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divPSTREEDEFMVW_TREE_NAME\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divPSTREEDEFMVW_EFFDT\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divPSTREEDEFMVW_VALID_TREE\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divPSTREEDEFMVW_SETCNTRL_IND\\$0\"]")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Tree Auditor page is accessible")
    except Exception as e:
        raise Exception(f"Tree Auditor page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Tree Manager", 
                                     "Tree Utilities",
                                     "Export Trees"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.locator("#RUN_TREEMOVER_RUN_CNTL_ID")).to_be_visible()
        expect(targetContentFrame.get_by_role("cell", name="Search", exact=True).locator("a")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Export Trees page is accessible")
    except Exception as e:
        raise Exception(f"Export Trees page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["Tree Manager", 
                                     "Tree Utilities",
                                     "Import Trees"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.locator("#RUN_TREEMOVER_RUN_CNTL_ID")).to_be_visible()
        expect(targetContentFrame.get_by_role("cell", name="Search", exact=True).locator("a")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Import Trees page is accessible")
    except Exception as e:
        raise Exception(f"Import Trees page cannot be navigated : {str(e)}")
    

    #21--
    try:
        navigate_menu(page=page,
                      menu_sequence=["Enterprise Components", 
                                     "Approvals", 
                                     "Approvals",
                                     "Monitor Approvals"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Approval Process")).to_be_visible()
        expect(targetContentFrame.get_by_label("Definition ID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Header Status")).to_be_visible()
        expect(targetContentFrame.get_by_label("Last Modified")).to_be_visible()
        expect(targetContentFrame.get_by_label("Approver", exact=True)).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Monitor Approvals page is accessible")
    except Exception as e:
        raise Exception(f"Monitor Approvals page cannot be navigated : {str(e)}")


    #22--
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Consolidation",
                                     "Define Elimination Set"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Elimination Set")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define Elimination Set page is accessible")
    except Exception as e:
        raise Exception(f"Define Elimination Set page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Consolidation",
                                     "Define Subsidiary Ownership"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Ownership Set")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define Subsidiary Ownership page is accessible")
    except Exception as e:
        raise Exception(f"Define Subsidiary Ownership page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Consolidation",
                                     "Define Minority Interest Sets"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Minority Interest Set")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define Minority Interest Sets page is accessible")
    except Exception as e:
        raise Exception(f"Define Minority Interest Sets page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Consolidation",
                                     "Consolidation Ledger Sets"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Ledger Set")).to_be_visible()
        expect(targetContentFrame.get_by_label("Description")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()


                # Print the run status of the CF Security Program for debugging
        print(f"Consolidation Ledger Sets page is accessible")
    except Exception as e:
        raise Exception(f"Consolidation Ledger Sets page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Consolidation",
                                     "Define Consolidation Set"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Consolidation Set")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()



                # Print the run status of the CF Security Program for debugging
        print(f"Define Consolidation Set page is accessible")
    except Exception as e:
        raise Exception(f"Define Consolidation Set page cannot be navigated : {str(e)}")

    #23--
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Equitization",
                                     "Define Equitization Rules"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Equitization Rule")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Define Equitization Rules page is accessible")
    except Exception as e:
        raise Exception(f"Define Equitization Rules page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Equitization",
                                     "Define Equitization Groups"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Equitization Group")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
 

                # Print the run status of the CF Security Program for debugging
        print(f"Define Equitization Groups page is accessible")
    except Exception as e:
        raise Exception(f"Define Equitization Groups page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Consolidate Financial Data", 
                                     "Equitization",
                                     "Request Equitization"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Run Control ID")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()

 

                # Print the run status of the CF Security Program for debugging
        print(f"Request Equitization page is accessible")
    except Exception as e:
        raise Exception(f"Request Equitization page cannot be navigated : {str(e)}")

    #24--
 
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Process Multi-Currency", 
                                     "Define and Process", 
                                     "Define Revaluation Step"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Process Step")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()



                # Print the run status of the CF Security Program for debugging
        print(f"Define Revaluation Step page is accessible")
    except Exception as e:
        raise Exception(f"Define Revaluation Step page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Process Multi-Currency", 
                                     "Define and Process", 
                                     "Define Translation Rules"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Translation Rule")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Define Translation Rules page is accessible")
    except Exception as e:
        raise Exception(f"Define Translation Rules page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Process Multi-Currency", 
                                     "Define and Process", 
                                     "Define Translation Steps"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Process Step")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Define Translation Steps page is accessible")
    except Exception as e:
        raise Exception(f"Define Translation Steps page cannot be navigated : {str(e)}")
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Process Multi-Currency", 
                                     "Define and Process", 
                                     "Define Process Group"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("SetID")).to_be_visible()
        expect(targetContentFrame.get_by_label("Process Group")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Define Process Group page is accessible")
    except Exception as e:
        raise Exception(f"Define Process Group page cannot be navigated : {str(e)}")
    

    #25--
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Monitor Background Process", 
                                     "Journal Unlock"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("User ID")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Search", exact=True)).to_be_visible()


                # Print the run status of the CF Security Program for debugging
        print(f"Journal Unlock page is accessible")
    except Exception as e:
        raise Exception(f"Journal Unlock page cannot be navigated : {str(e)}")
    


    #26--
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Close Ledgers", 
                                     "Closing Rules"])   
            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Closing Rule").fill(testdata['closing_rule'])
        targetContentFrame.get_by_label("Closing Rule").press("Enter")
        expect(targetContentFrame.get_by_label("Description")).to_be_visible()
        expect(targetContentFrame.get_by_label("Ledger Template")).to_be_visible()
        expect(targetContentFrame.get_by_label("Effective Date")).to_be_visible()
        expect(targetContentFrame.get_by_text(testdata['closing_rule'])).to_be_visible()
        expect(targetContentFrame.locator("#CLOSE_DEFN_TBL_SETID")).to_be_visible()

                # Print the run status of the CF Security Program for debugging
        print(f"Closing Rules page is accessible")
    except Exception as e:
        raise Exception(f"Closing Rules page cannot be navigated : {str(e)}")
    

    #27--
    try:
        navigate_menu(page=page,
                      menu_sequence=["General Ledger", 
                                     "Close Ledgers", 
                                     "Request Ledger Close"])   
        
                # Add run control ID to the form
        add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])

            # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        expect(targetContentFrame.get_by_label("Business Unit for Prompting")).to_be_visible()
        expect(targetContentFrame.get_by_label("Close Request Type")).to_be_visible()
        expect(targetContentFrame.get_by_role("button", name="Run")).to_be_visible()
                # Print the run status of the CF Security Program for debugging
        print(f"Request Ledger Close page is accessible")
    except Exception as e:
        raise Exception(f"Request Ledger Close page cannot be navigated : {str(e)}")
    
