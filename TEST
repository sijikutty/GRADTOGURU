import paramiko
import os

def transfer_file_to_unix(hostname, username, password, local_file_path, server_directory,file_name):
    # Check if the local file exists
    if not os.path.exists(local_file_path):
        raise Exception(f"Local file '{local_file_path}' not found.")

    # Initialize SSH client
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # Connect to the remote server
        ssh_client.connect(hostname=hostname, username=username, password=password)
        
        # Open SFTP session over the SSH connection
        sftp = ssh_client.open_sftp()
        
        # Check if the specified directory exists on the server
        if not directory_exists(sftp, server_directory):
            raise Exception(f"Directory {server_directory} does not exist on the server.")
        
        # Place the local system file to the Unix server folder      
        sftp.put(local_file_path, os.path.join(server_directory, file_name))
        sftp.close()

    except Exception as e:
        # Raise a Exception if any exception occurs during the process
        raise Exception(f"Failed to upload file: {str(e)}")

    finally:
        # Close the SSH client connection in the finally block to ensure cleanup
        if ssh_client:
            ssh_client.close()

# Function to check if a directory exists on the remote server
def directory_exists(sftp, remote_path):
    try:
        sftp.stat(remote_path)
        return True
    except FileNotFoundError:
        return False
    except Exception as e:
        raise Exception(f"Error checking directory existence: {str(e)}")
    
def read_file_content(sftp, remote_file_path):
    try:
        # Open the file in read mode
        with sftp.open(remote_file_path, 'r') as file:
            content = file.read()
            return content

    except Exception as e:
        print(f"Error reading file {remote_file_path}: {str(e)}")
        return None

   
# SSH connection details
hostname = "m"
username = "n"
password = "b"  # Replace with your actual password
# Extract file location and content for ODS Unix file modification
search_path = 'nn'
local_file_path = 'mm'
file_to_edit='pp.out'
search_path = 'mm'  # Path to search for files
#search_path = 'qq'
file_to_read = 'mm.out'  # File to read
#file_to_read = 'mm.log'
# k Unix File modification
try:
    # Attempt to update the remote file on ODS server
    transfer_file_to_unix(hostname, username, password, local_file_path, search_path,file_to_edit)
    #update_remote_file(hostname, username, password, search_path, file_to_edit, new_content)
    print("ODS Maximis File Upload successful.")
except Exception as e:
    # Handle and print any runtime error that occurs during file update
    print(f"Error occurred: {str(e)}")

# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Open an SFTP session on the SSH connection
    sftp = ssh_client.open_sftp()

    # Check if the directory exists before reading file
    if directory_exists(sftp, search_path):
        print("Directory exists")
        
        # Construct full path of the file to read
        file_path = f"{search_path}/{file_to_read}"
        
        # Read the file content
        file_content = read_file_content(sftp, file_path)
        
        if file_content is not None:
            print(f"Content of {file_to_read}:")
            print(file_content)
        else:
            print(f"Failed to read content of {file_to_read}")

    else:
        print(f"Directory {search_path} does not exist on the server.")

finally:
    # Close the SFTP session and SSH connection
    if ssh_client:
        ssh_client.close()

