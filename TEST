from playwright.sync_api import expect, Page
from automation_utils import get_testdata
from ps_utils import navigate_menu
import pytest


@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_submit_chartfield_req(page:Page, set_test_dependency, testcase):
    navigate_menu(page=page,
                  menu_sequence=["Set Up Financials/Supply Chain",
                                 "Common Definitions",
                                 "Design ChartFields",
                                 "Define Values",
                                 "Submit ChartField Request"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")

    expect(frame.get_by_label("SetID")).to_be_visible()
    expect(frame.get_by_text("Field Name")).to_be_visible()
    expect(frame.get_by_text("Field Action")).to_be_visible()
    expect(frame.get_by_text("Field Value")).to_be_visible()
    
    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_query_manager(page : Page, set_test_dependency, testcase):

    navigate_menu(page=page,
                  menu_sequence=["Reporting Tools",
                                 "Query",
                                 "Query Manager"])

    frame = page.frame_locator("iframe[name='TargetContent']")

    frame.get_by_label("Search By").select_option(label="Query Name")
    frame.locator("[id^='QRYSELECT_WRK_QRYSEARCHTEXT']").fill("HF_ACCOUNTS")
    frame.get_by_role("button", name="Search", exact=True).click()

    expect(frame.locator("[id=\"win0divQRYSELECT_WRK_QRYNAME\\$0\"]")).to_be_visible()
        
    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_create_jrnl(page : Page, set_test_dependency, testcase):

    navigate_menu(page = page, 
                menu_sequence=["General Ledger", 
                                 "Journals", 
                                 "Journal Entry", 
                                 "Create/Update Journal Entries"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")
    
    expect(frame.get_by_text("Business Unit")).to_be_visible()
    expect(frame.get_by_text("Journal ID")).to_be_visible()
    expect(frame.get_by_text("Journal Date")).to_be_visible()
    
    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_process_monitor(page : Page, set_test_dependency, testcase):

    navigate_menu(page= page,
                  menu_sequence=["PeopleTools",
                                "Process Scheduler",
                                "Process Monitor"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")

    expect(frame.get_by_role("cell", name="View Process Requests", exact=True)).to_be_visible()

    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_tree_manager(page : Page, set_test_dependency, testcase):

    navigate_menu(page= page,
                  menu_sequence=["Tree Manager",
                                "Tree Manager"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")
    
    frame.get_by_role("button", name="Search", exact=True).click()
    expect(frame.get_by_role("columnheader", name="Tree Name")).to_be_visible()

    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_tree_auditor(page : Page, set_test_dependency, testcase):

    navigate_menu(page= page,
                  menu_sequence=["Tree Manager",
                                 "Tree Auditor"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")
  
    expect(frame.locator("#RUN_TREE_AUDVW_RUN_CNTL_ID")).to_be_visible()

    
@pytest.mark.parametrize("testcase", get_testdata("test_ps_pages"))
def test_pg_user_profiles(page : Page, set_test_dependency, testcase):

    navigate_menu(page= page,
                  menu_sequence=["PeopleTools", 
                                 "Security",
                                 "User Profiles",
                                 "User Profiles"])
    
    frame = page.frame_locator("iframe[name='TargetContent']")
  
    frame.get_by_role("button", name="Search", exact=True).click()
    frame.get_by_role("cell", name="User ID", exact=True).click()
    expect(frame.get_by_role("cell", name="User ID", exact=True)).to_be_visible()
