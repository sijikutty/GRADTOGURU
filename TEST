import paramiko

# SSH connection details
hostname = 'example.com'
username = 'your_username'
password = 'your_password'
target_directory = 'fit/data/in'

# Function to search for the directory recursively
def search_directory_recursive(ssh_client, root_path, target_directory):
    # Create an interactive shell session
    ssh_shell = ssh_client.invoke_shell()

    # Send find command to search recursively for the target directory
    ssh_shell.send(f'find {root_path} -type d -name "{target_directory}"\n')

    # Wait for the command to execute
    while not ssh_shell.recv_ready():
        pass

    # Read and print the output of the command
    output = ssh_shell.recv(65535).decode()

    # Check if the target directory exists in the output
    if target_directory in output:
        print(f"Directory '{target_directory}' found in '{output}'.")
    else:
        print(f"Directory '{target_directory}' not found in '{root_path}'.")

# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Attempt to find the directory starting from known common root paths
    common_root_paths = ['/home', '/var', '/usr', '/opt']  # Add more paths as needed

    found = False
    for root_path in common_root_paths:
        try:
            search_directory_recursive(ssh_client, root_path, target_directory)
            found = True
            break
        except Exception as e:
            print(f"Failed to search in '{root_path}': {str(e)}")
            continue
    
    if not found:
        print(f"Failed to find '{target_directory}' in any of the common root paths.")

finally:
    # Close the SSH connection
    ssh_client.close()
