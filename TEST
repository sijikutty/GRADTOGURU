Current State: No Automated Testing
In the current setup, there is no automated testing framework in place. This means that:

Testing Process: Testing is likely performed manually, which can be time-consuming and error-prone.
Integration: Thereâ€™s no automated mechanism to integrate testing into the development workflow.
Coverage: There may be limited or inconsistent test coverage, as tests are not systematically executed or maintained.
Documentation: Test cases and results are not automatically documented or tracked, which can lead to challenges in understanding test coverage and identifying issues.
Feedback Loop: Developers and testers might receive feedback on issues later in the development cycle, which can delay the resolution of bugs and affect the overall quality of the product.
Future State: Implemented Automated Testing with GitHub SCM
In the future state, the following changes are planned:

Version Control with GitHub SCM:

Source Code Management: Use GitHub for source code management, which provides version control and collaboration features.
Integration: GitHub will be integrated with the automated testing pipeline to manage code changes and trigger tests based on commits or pull requests.
Single-Stage SAM Pipeline using CFT in AWS Cloud:

Pipeline: Implement a single-stage AWS SAM (Serverless Application Model) pipeline.
CloudFormation Templates (CFT): Use CloudFormation templates to define and provision AWS resources, ensuring consistent and repeatable deployments.
Deployment: Automate the deployment of serverless applications and infrastructure in AWS.
Automated Testing of Lambdas:

Smoke Tests: Implement automated smoke tests to verify that the AWS Lambda functions are running and responding as expected after deployment.
Regression Tests: Include regression tests to ensure that new changes do not break existing functionality of the Lambda functions.
GUI Smoke and Regression Testing:

Playwright for Python:
Purpose: Use Playwright, a modern web testing library, for GUI smoke tests.
Language: Write test scripts in Python to interact with and verify the functionality of the web application's user interface.
UFT (Unified Functional Testing) with Pytest Fixtures:
Purpose: Utilize UFT for more comprehensive GUI testing and integrate it with Pytest fixtures for flexible and reusable test configurations.
Integration: Leverage Pytest fixtures to manage setup and teardown of test environments, enhancing test maintainability and efficiency.
Benefits of Future State
Efficiency: Automated testing reduces the time and effort required for testing, speeding up the development cycle.
Consistency: Automated tests provide consistent test execution and coverage, reducing the risk of human error.
Immediate Feedback: Developers receive immediate feedback on code changes, allowing for quicker identification and resolution of issues.
Scalability: The automated pipeline can scale with the project, accommodating more tests and larger codebases.
Quality Assurance: Improved test coverage and the ability to run tests frequently contribute to higher software quality.
By transitioning to this future state, the testing process becomes more integrated, efficient, and reliable, supporting better software development practices and enhanced product quality.
