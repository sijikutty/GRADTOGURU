import paramiko

search_path = '/appl/cits/dev/infashr/fit/data/in'  # Path to search for files
file_to_read = 'maximis.out'  # File to read

def directory_exists(sftp, remote_path):
    try:
        sftp.stat(remote_path)
        return True
    except FileNotFoundError:
        return False
    except Exception as e:
        print(f"Error checking directory existence: {str(e)}")
        return False

def read_file_content(sftp, remote_file_path):
    try:
        # Open the file in read mode
        with sftp.open(remote_file_path, 'r') as file:
            content = file.read()
            return content

    except Exception as e:
        print(f"Error reading file {remote_file_path}: {str(e)}")
        return None

# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Open an SFTP session on the SSH connection
    sftp = ssh_client.open_sftp()

    # Check if the directory exists before reading file
    if directory_exists(sftp, search_path):
        print("Directory exists")
        
        # Construct full path of the file to read
        file_path = f"{search_path}/{file_to_read}"
        
        # Read the file content
        file_content = read_file_content(sftp, file_path)
        
        if file_content is not None:
            print(f"Content of {file_to_read}:")
            print(file_content)
        else:
            print(f"Failed to read content of {file_to_read}")

    else:
        print(f"Directory {search_path} does not exist on the server.")

finally:
    # Close the SFTP session and SSH connection
    if ssh_client:
        ssh_client.close()
