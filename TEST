import paramiko

# SSH connection details
hostname = 'example.com'
username = 'your_username'
password = 'your_password'
target_file = 'mm.dat'  # File name to search for

# Function to recursively search for a file
def search_for_file(sftp, current_directory, target_file):
    try:
        # Change directory to the current directory
        sftp.chdir(current_directory)

        # List all items (files and directories) in the current directory
        items = sftp.listdir()

        for item in items:
            # Check if the item is a file
            if item == target_file:
                return True
            # Check if the item is a directory
            elif sftp.stat(item).st_mode // 32768 == 1:  # Directory check
                # Recursively search within this directory
                if search_for_file(sftp, f"{current_directory}/{item}", target_file):
                    return True

        return False

    except FileNotFoundError:
        return False

    except Exception as e:
        print(f"Error searching for file in {current_directory}: {str(e)}")
        return False

# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Open an SFTP session on the SSH connection
    sftp = ssh_client.open_sftp()

    # Check if the target file exists anywhere
    if search_for_file(sftp, "/", target_file):
        print(f"File '{target_file}' exists in at least one directory on the server.")
    else:
        print(f"File '{target_file}' does not exist in any directory on the server.")

finally:
    # Close the SFTP session and SSH connection
    if ssh_client:
        ssh_client.close()
