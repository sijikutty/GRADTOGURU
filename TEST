import paramiko
import os
from pathlib import Path


hostname = "kk"
username = "n"
password = "m&9Qp" 
# Extract file location and content for ODS Unix file modification
server_directory = '/appl/ch/'
file_to_edit = "Rf.txt"
local_file_path = "C:/Github/Input files/Rf.txt"
remote_file_path='/appl/ch/Rf.txt'
file_to_edit = "Rf.trg"
local_file_path = "C:/Github/Input files/Rf.trg"
file_to_edit = "Rf.log"
local_file_path = "C:/Github/Input files/Rf.log"
def directory_exists(sftp, remote_path):
    """
    Function to check if a directory exists on the remote server.
    """
    try:
        sftp.stat(remote_path)
        return True
    except FileNotFoundError:
        return False
    except Exception as e:
        raise Exception(f"Error checking directory existence: {str(e)}")

def transfer_file_to_unix(hostname, username, password, local_file_path, server_directory, file_name):
    """
    Function to transfer a local file to a remote Unix server via SFTP.
    """
    # Check if the local file exists
    if not os.path.exists(local_file_path):
        raise Exception(f"Local file '{local_file_path}' not found.")

    # Initialize SSH client
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # Connect to the remote server
        ssh_client.connect(hostname=hostname, username=username, password=password)
        
        # Open SFTP session over the SSH connection
        sftp = ssh_client.open_sftp()
        
        # Check if the specified directory exists on the server
        if not directory_exists(sftp, server_directory):
            raise Exception(f"Directory {server_directory} does not exist on the server.")
        
        # Place the local system file in the Unix server folder
        #remote_file_path = str(server_directory/file_name)
        sftp.put(local_file_path, remote_file_path)
        print(f"File '{file_name}' successfully uploaded to {server_directory} on the server.")
        
        # Check if the file exists right after uploading
        try:
            sftp.stat(remote_file_path)  # Verify the file exists on the remote server
            print(f"File '{file_name}' confirmed on the remote server.")
        except FileNotFoundError:
            print(f"Error: File '{file_name}' not found after upload.")

        # Change file permissions to be readable by everyone
        try:
            #remote_file_path = str(server_directory/file_name)
            print(f"Changing permissions for {remote_file_path} to be readable.")

            # Change permissions to 644 (readable by owner, group, and others)
            sftp.chmod(remote_file_path, 0o644)

            # Confirm permissions change
            print(f"Permissions for {remote_file_path} changed to 644 (rw-r--r--).")

        except Exception as e:
            print(f"Error changing file permissions: {e}")


        # List all files in the directory to confirm
        files = sftp.listdir(server_directory)
        if files:
            print(f"Files in {server_directory}:")
            for filename in files:
                print(filename)
        else:
            print(f"No files found in {server_directory}.")
        
        # Close the SFTP session
        sftp.close()

    except Exception as e:
        # Handle exceptions that occur during file transfer
        raise Exception(f"Failed to upload file: {str(e)}")

    finally:
        # Ensure the SSH client is closed in all cases
        if ssh_client:
            ssh_client.close()

# Main execution
try:
    # Attempt to upload the local file to the remote Unix server
    transfer_file_to_unix(hostname, username, password, local_file_path, server_directory, file_to_edit)
    print("ODS TM1 File Upload successful.")
            
except Exception as e:
    # Handle and print any runtime error that occurs during file upload
    print(f"Error occurred: {str(e)}")
