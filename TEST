import paramiko

search_path = '/appl/cits/dev/infashr/fit/data/in'  # Path to search for files

def directory_exists(sftp, remote_path):
    try:
        sftp.stat(remote_path)
        return True
    except FileNotFoundError:
        return False
    except Exception as e:
        print(f"Error checking directory existence: {str(e)}")
        return False

def list_files(sftp, remote_path):
    try:
        # Change directory to the remote_path
        sftp.chdir(remote_path)

        # Execute ls -al command to list all files and directories
        stdin, stdout, stderr = ssh_client.exec_command(f"ls -al {remote_path}")
        
        # Read the output from the command
        output = stdout.read().decode()
        
        # Print the output
        print(f"Listing all files and directories in {remote_path}:")
        print(output)

    except IOError:
        # IOError will be raised if directory doesn't exist or permission is denied
        print(f"Directory {remote_path} does not exist or cannot be accessed.")

    except Exception as e:
        print(f"Error listing folder {remote_path}: {str(e)}")

# Create an SSH client instance
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the SSH server using password authentication
    ssh_client.connect(hostname=hostname, username=username, password=password)

    # Open an SFTP session on the SSH connection
    sftp = ssh_client.open_sftp()

    # Check if the directory exists before listing files
    if directory_exists(sftp, search_path):
        print("Directory exists")
        # List all files and directories using ls -al command
        list_files(sftp, search_path)
    else:
        print(f"Directory {search_path} does not exist on the server.")

finally:
    # Close the SFTP session and SSH connection
    if ssh_client:
        ssh_client.close()
