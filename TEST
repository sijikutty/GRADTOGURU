import paramiko

def update_remote_file(hostname, username, password, search_path, file_to_edit, new_content):
    # Initialize SSH client
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # Connect to the remote server
        ssh_client.connect(hostname=hostname, username=username, password=password)
        
        # Open SFTP session over the SSH connection
        sftp = ssh_client.open_sftp()
    
        # Check if the specified directory exists on the server
        if not directory_exists(sftp, search_path):
            raise RuntimeError(f"Directory {search_path} does not exist on the server.")
        
        # Construct the full file path
        file_path = f"{search_path}/{file_to_edit}"
        
        # Check if the specified file exists on the server
        if not file_exists(sftp, file_path):
            raise RuntimeError(f"File {file_path} does not exist on the server.")

        # Write new content to the specified file
        write_file_content(sftp, file_path, new_content)
    
    except Exception as e:
        # Raise a RuntimeError if any exception occurs during the process
        raise RuntimeError(f"Failed to update file: {str(e)}")
    
    finally:
        # Close the SSH client connection in the finally block to ensure cleanup
        if ssh_client:
            ssh_client.close()

# Helper function to check if a directory exists on the remote server
def directory_exists(sftp, path):
    try:
        sftp.stat(path)
        return True
    except IOError:
        return False

# Helper function to check if a file exists on the remote server
def file_exists(sftp, path):
    try:
        sftp.stat(path)
        return True
    except IOError:
        return False

# Helper function to write content to a file on the remote server
def write_file_content(sftp, file_path, content):
    with sftp.open(file_path, 'w') as file:
        file.write(content)
