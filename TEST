' UpdateRally UFT library function
Function UpdateRally(page, request, testcase)
    Dim screenshotPath, verdict, notes, payload, tcr
    
    ' Taking screenshot of the test
    screenshotPath = "Result\" & page & ".png" ' Update the path as needed
    page.screenshot path, screenshotPath
    
    ' Setting verdict and notes based on the test outcome 
    If request = "Passed" Then
        verdict = "Pass"
    ElseIf request = "Failed" Then
        verdict = "Fail"
        ' Getting the exception message to add to rally
        notes = Err.Description ' Assuming error description is available
    End If

    ' Generating rally payload
    Set payload = CreateObject("Scripting.Dictionary")
    payload.Add "key", testcase("key")
    Set rallyPayload = CreateObject("Scripting.Dictionary")
    rallyPayload.Add "server", testcase("rally")("server")
    rallyPayload.Add "user", testcase("rally")("user")
    rallyPayload.Add "apikey", testcase("rally")("apikey")
    rallyPayload.Add "workspace", testcase("rally")("workspace")
    rallyPayload.Add "project", testcase("rally")("project")
    rallyPayload.Add "Tcid", Split(testcase("key"), "-")(UBound(Split(testcase("key"), "-"))) ' Extracting TCID
    rallyPayload.Add "build", testcase("env") & "-Automated Run"
    rallyPayload.Add "run_date", Now
    rallyPayload.Add "verdict", verdict
    rallyPayload.Add "notes", "The testcase has " & verdict & "ed. " & notes
    payload.Add "Rally", rallyPayload
    
    ' Creating testcase result in rally
    Set tcr = CreateTestCaseResult(payload, screenshotPath) ' Assuming CreateTestCaseResult function is available
    ' Return the created TestCaseResult object
    Set UpdateRally = tcr
End Function
