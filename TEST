@pytest.fixture(scope="function", autouse=True)
def get_testcasejson():
    try:
        # Create a session with the 'dev' profile
        session = boto3.Session(profile_name='dev')
        
        # Create an S3 client using the session
        s3_client = session.client("s3")
        rally_s3 = 'app-5208-dev-ue1-shared-s3-1'
        rally_filename = 'Testing/Data/PSTesting/testcase.json'

        # Getting the file
        response = s3_client.get_object(Bucket=rally_s3, Key=rally_filename)

        # Reading the file content
        file_content = response['Body'].read().decode('utf-8')

        # Converting to JSON
        json_content = json.loads(file_content)
        print(json_content)
        return json_content
    
    except ClientError as err:
        print(err)
--------------
from automation_utils import get_testdata
import win32com, win32com.client
import pytest

@pytest.mark.order(-1)
@pytest.mark.parametrize("testcase", get_testdata("test_fah_concurrent"))
def test_FAH_Concurrent(get_testcasejson,testcase):

    #testdata = testcase["testdata"]
    try:
            qtp = win32com.client.Dispatch("QuickTest.Application")

            # starts up QTP
            qtp.Launch() 

            # make the QTP window visible
            qtp.Visible = True

            # Open a test, replace the path 
            qtp.Open(r"C:\Github\corp_corpit_ps_egl_test_automation\UFT\FAH_Concurrent_Program")

            # to open a QTP test in Quality Center
            # qtp.Open(r"[QualityCenter] Subject\FolderName\QTPScript")

            # create a RunResultsOptions object
            qtResultsOpt = win32com.client.Dispatch("QuickTest.RunResultsOptions")

            # set the location to where the results will be save
            #qtResultsOpt.ResultsLocation = "C:\Test\test1\res"

            qtp.Test.Run(qtResultsOpt)

            #print %qtp.Test.LastRunResults.Status

            # close the Test
            qtp.Test.Close()

            # quit QTP
            qtp.Quit()
            print("Login Success!")

    except AssertionError:
        raise Exception("FAH Concurrent Program Failed.")
