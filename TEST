import paramiko
import os


hostname = "b"
username = "v"
password = "c" 
# Extract file location and content for ODS Unix file modification
search_path = '/appl/k/dev/infashr/fit/data/in'
file_to_edit = "g.txt"
local_file_path = "C:/b.txt"
# ODS Unix File modification
try:
    # Attempt to update the remote file on ODS server
    #transfer_file_to_unix(hostname, username, password, local_file_path, search_path,file_to_edit)
   if not os.path.exists(local_file_path):
       raise Exception(f"Local file '{local_file_path}' not found.")
   # Initialize SSH client
   ssh_client = paramiko.SSHClient()
   ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
   
   try:
       # Connect to the remote server
       ssh_client.connect(hostname=hostname, username=username, password=password)
       
       # Open SFTP session over the SSH connection
       sftp = ssh_client.open_sftp()
       
       # Check if the specified directory exists on the server
       if not directory_exists(sftp, server_directory):
           raise Exception(f"Directory {server_directory} does not exist on the server.")
       
       # Place the local system file to the Unix server folder      
       sftp.put(local_file_path, os.path.join(server_directory, file_name))
       sftp.close()
   except Exception as e:
       # Raise a Exception if any exception occurs during the process
       raise Exception(f"Failed to upload file: {str(e)}")
   finally:
       # Close the SSH client connection in the finally block to ensure cleanup
       if ssh_client:
           print("ODS TM1 File Upload successful.")
           ssh_client.close()
    #update_remote_file(hostname, username, password, search_path, file_to_edit, new_content)
            
except Exception as e:
    # Handle and print any runtime error that occurs during file update
    print(f"Error occurred: {str(e)}")

def transfer_file_to_unix(hostname, username, password, local_file_path, server_directory,file_name):
    # Check if the local file exists
    if not os.path.exists(local_file_path):
        raise Exception(f"Local file '{local_file_path}' not found.")

    # Initialize SSH client
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # Connect to the remote server
        ssh_client.connect(hostname=hostname, username=username, password=password)
        
        # Open SFTP session over the SSH connection
        sftp = ssh_client.open_sftp()
        
        # Check if the specified directory exists on the server
        if not directory_exists(sftp, server_directory):
            raise Exception(f"Directory {server_directory} does not exist on the server.")
        
        # Place the local system file to the Unix server folder      
        sftp.put(local_file_path, os.path.join(server_directory, file_name))
        sftp.close()

    except Exception as e:
        # Raise a Exception if any exception occurs during the process
        raise Exception(f"Failed to upload file: {str(e)}")

    finally:
        # Close the SSH client connection in the finally block to ensure cleanup
        if ssh_client:
            ssh_client.close()
# Function to check if a directory exists on the remote server
def directory_exists(sftp, remote_path):
    try:
        sftp.stat(remote_path)
        return True
    except FileNotFoundError:
        return False
    except Exception as e:
        raise Exception(f"Error checking directory existence: {str(e)}")




   
