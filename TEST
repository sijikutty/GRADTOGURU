from playwright.sync_api import Page, expect
from automation_utils import get_testdata, get_secrets
from ps_utils import navigate_menu, add_run_control_id
import pytest 
import time
from automation_utils import get_testdata

# Define the test function with parameterization
@pytest.mark.parametrize("testcase", get_testdata("test_GL_Configuration"))
def test_GL_Configuration(page: Page, testcase):
    # Extract test data for the current test case
    testdata = testcase["testdata"]  
    secrets = get_secrets(testdata["secretID"])
    
    # Navigation block 1: Navigate to "Design ChartFields" -> "Define ChartField Value"
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Define Values",
                                     "Define ChartField Value"])   
        
        # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        
        # Assert visibility of elements
        expect(targetContentFrame.get_by_role("link", name="Account")).to_be_visible()
        
        # Fill in form fields and perform actions
        targetContentFrame.get_by_role("link", name="Account").click()
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Account", exact=True).fill(testdata['ACCOUNT'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        
        expect(targetContentFrame.get_by_label("Effective Date")).to_be_visible()
        expect(targetContentFrame.get_by_label("Monetary Account Type")).to_be_visible()
        
        # Print status for debugging
        print(f"Chartfield Values page is accessible")
        
    except Exception as e:
        raise Exception(f"Chartfield Values page cannot be navigated : {str(e)}")
    
    # Navigation block 2: Navigate to "Security" -> "Chartfield Security" -> "Maintain Security Rules" -> "Request CF Security Build"
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Security", 
                                     "Chartfield Security", 
                                     "Maintain Security Rules",
                                     "Request CF Security Build"])
        
        # Add run control ID to the form
        add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])
        
        # Locate the target iframe for filling in the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        
        # Assert visibility of elements
        expect(targetContentFrame.get_by_text("*Security Method")).to_be_visible()
        expect(targetContentFrame.get_by_text("*Request Date Option")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"SEC_BUILD_REQ_DATE_REQ_OPTION2\\$0\"]")).to_be_visible()
        
        # Print status for debugging
        print(f"CF Security build page is accessible")
        
    except Exception as e:
        raise Exception(f"CF Security build page cannot be navigated : {str(e)}")
    
    # Navigation block 3: Navigate to "Design ChartFields" -> "ChartField Value Sets" -> "Setup ChartField Value Sets"
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "ChartField Value Sets",
                                     "Setup ChartField Value Sets"])   
        
        # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        
        # Fill in form fields and perform actions
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("ChartField Value Set").fill(testdata['CFValueset'])
        targetContentFrame.get_by_role("button", name="Search", exact=True).click()
        
        # Assert visibility of elements
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").locator("#CFV_SET_TBL_CFV_SET")).to_contain_text(testdata['CFValueset'])
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Effective Date")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Status")).to_be_visible()
        expect(page.frame_locator("iframe[name=\"TargetContent\"]").get_by_label("Field Name")).to_be_visible()
        
        # Print status for debugging
        print(f"ChartField Value Set page is accessible")
        
    except Exception as e:
        raise Exception(f"ChartField Value Set page cannot be navigated : {str(e)}")
    
    # Navigation block 4: Navigate to "Design ChartFields" -> "Combination Editing" -> "Build Combination Data"
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Combination Editing",
                                     "Build Combination Data"])  
        
        # Add run control ID to the form
        add_run_control_id(page=page, run_ctrl_id=testdata['run_control_id'])
        
        # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]") 
        
        # Assert visibility of elements
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_CDT_BUILD_OPTN\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_LEDGER_GROUP\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"COMBO_BLD_REQ_EFFDT_TO\\$0\"]")).to_be_visible()
        
        # Print status for debugging
        print(f"Combo build page is accessible")
        
    except Exception as e:
        raise Exception(f"Combo build page cannot be navigated : {str(e)}")
    
    # Navigation block 5: Navigate to "Design ChartFields" -> "Combination Editing" -> "Review Combo Selector Tbl Data"
    try:
        navigate_menu(page=page,
                      menu_sequence=["Set Up Financials/Supply Chain", 
                                     "Common Definitions", 
                                     "Design ChartFields",
                                     "Combination Editing",
                                     "Review Combo Selector Tbl Data"])   
        
        # Locate the target iframe for the form
        targetContentFrame = page.frame_locator("iframe[name=\"TargetContent\"]")
        
        # Fill in form fields and perform actions
        targetContentFrame.get_by_label("SetID").fill(testdata['SETID'])
        targetContentFrame.get_by_label("Group").fill(testdata['Group'])
        targetContentFrame.get_by_role("button", name="Search").click()
        
        # Assert visibility of elements
        expect(targetContentFrame.locator("[id=\"tdINQ_DUMMY\\$0\\#9\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"win0divCOMBO_SEL_WRK_COMBINATION\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"CF2_TO\\$0\"]")).to_be_visible()
        expect(targetContentFrame.locator("[id=\"CF1_FROM\\$0\"]")).to_be_visible()
        
        # Print status for debugging
        print(f"Review Combo Selector Tbl Data page is accessible")
        
    except Exception as e:
        raise Exception(f"Review Combo Selector Tbl Data page cannot be navigated : {str(e)}")
